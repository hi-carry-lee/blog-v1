// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique(map: "user_email_idx")
  emailVerified DateTime? @db.Timestamp(6)
  image         String?
  password      String?
  role          String    @default("user")
  address       Json?     @db.Json
  createdAt     DateTime  @default(now()) @db.Timestamp(6)
  updatedAt     DateTime  @updatedAt
  account       Account[]
  Post          Post[]
  Comment       Comment[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  // 新增字段：存储每个provider的特定信息
  providerName  String? // provider提供的用户名
  providerImage String? // provider提供的头像URL

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Category {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique(map: "category_slug_idx")
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt
  posts     Post[] // ← 这不是数据库字段！是 Prisma 的虚拟关联，方便我们查询Post，进而计算postCount

  @@map("categories")
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt
  posts     Post[]   @relation("PostTags") // 多对多

  @@map("tags")
}

model Post {
  id         String  @id @default(cuid())
  title      String // 标题
  slug       String  @unique(map: "post_slug_idx") // URL友好的标识符
  brief      String  @db.Text // 摘要/简介
  coverImage String? // 封面图URL（可选）
  content    String  @db.Text // Markdown内容（包含图片URL）

  // SEO 和元数据
  metaTitle       String? // SEO标题（可选，默认使用title）
  metaDescription String? // SEO描述（可选，默认使用brief）

  // 发布控制
  published Boolean @default(false) // 是否发布
  featured  Boolean @default(false) // 是否为精选文章

  // 关联
  categoryId  String    @map("category_id")
  authorId    String    @map("author_id")
  tagIds      String[]  @map("tag_ids")
  // 时间戳
  publishedAt DateTime? // 发布时间（可选）
  createdAt   DateTime  @default(now()) @db.Timestamp(6)
  updatedAt   DateTime  @updatedAt

  // 关联关系
  // 如果分类下有博客，禁止删除分类，必须先删除或转移所有博客，才能删除分类
  category Category  @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  tags     Tag[]     @relation("PostTags")
  author   User      @relation(fields: [authorId], references: [id])
  Comment  Comment[]

  @@map("posts")
}

model Comment {
  id        String   @id @default(uuid())
  content   String // 评论正文
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String // 作者（用户）
  postId    String // 所属文章
  parentId  String? // 可选：父评论 ID（自引用，实现嵌套）
  approved  Boolean? @default(false) // 审核状态，暂时使用机器审核

  author  User      @relation(fields: [authorId], references: [id])
  post    Post      @relation(fields: [postId], references: [id])
  parent  Comment?  @relation("CommentReplies", fields: [parentId], references: [id]) // 自引用：父评论
  replies Comment[] @relation("CommentReplies") // 子评论数组
}
